name: reference.aspose.net-generator

on:
  workflow_dispatch:
    inputs:
      products:
        description: "Comma-separated list of products (e.g., Aspose.Words,Aspose.PDF) or 'all'"
        required: true
        default: "all"
  schedule:
    - cron: "0 0 1 * *" # Runs on the 1st of every month

jobs:
  detect-updates:
    runs-on: windows-latest
    outputs:
      updates: ${{ steps.filter.outputs.updates }}  # Pass updates as an output
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: python -m pip install requests

      - name: Determine Run Type (Manual vs Scheduled)
        id: run-type
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "scheduled_run=true" >> $GITHUB_ENV
          else
            echo "scheduled_run=false" >> $GITHUB_ENV
          fi

      - name: Set Default Products for Scheduled Runs Only
        if: env.scheduled_run == 'true'
        run: |
          echo "Scheduled run detected. Setting products to 'all'."
          echo "products=all" >> $GITHUB_ENV

      - name: Fetch Latest Versions from NuGet
        id: check_versions
        run: python scripts/reference/check_versions.py

      - name: Filter Products for Processing
        id: filter
        shell: pwsh
        run: |
          Write-Host "DEBUG: Received products input: ${{ github.event.inputs.products || env.products || 'all' }}"

          $PRODUCTS = "${{ github.event.inputs.products || env.products || 'all' }}"
          if ($PRODUCTS -eq "all") {
              $PRODUCTS = (Get-Content reference/status.json | ConvertFrom-Json | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -join ","
          }

          Write-Host "DEBUG: Processing products: $PRODUCTS"

          # Run detect_updates.py to determine products needing updates
          $TO_PROCESS = python scripts/reference/detect_updates.py "$PRODUCTS" | Out-String
          $TO_PROCESS = $TO_PROCESS.Trim()

          Write-Host "DEBUG: Raw JSON from detect_updates.py:"
          Write-Host "$TO_PROCESS"

          # Ensure the logs directory exists
          mkdir logs -Force

          # Store JSON output in logs/updates.json
          if ($TO_PROCESS -ne "[]" -and $TO_PROCESS -ne "") {
              Write-Host "Saving updates to logs/updates.json"
              $TO_PROCESS | Out-File -FilePath logs/updates.json -Encoding utf8
          } else {
              Write-Host "No updates found. Creating empty logs/updates.json"
              "[]" | Out-File -FilePath logs/updates.json -Encoding utf8
          }
          echo "updates=$TO_PROCESS" >> $GITHUB_ENV
          echo "::set-output name=updates::$TO_PROCESS"

  process-family:
    needs: detect-updates
    runs-on: windows-latest
    strategy:
      matrix:
        family: ${{ fromJson(needs.detect-updates.outputs.updates || '[]') }}
    steps:
      - name: Checkout Repository (Ensure Latest State)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure `logs/updates.json` Exists
        shell: pwsh
        run: |
          if (-Not (Test-Path "logs/updates.json")) {
              Write-Host "No logs/updates.json found. Exiting."
              exit 1
          }

      - name: Install Python Dependencies
        run: python -m pip install requests beautifulsoup4

      - name: Debug 
        shell: pwsh
        run: |
          Write-Host "DEBUG: Family: ${{ matrix.family.family }}"
          Write-Host "DEBUG: Version: ${{ matrix.family.version }}"
          Write-Host "Executing: python scripts/reference/postprocessor.py '${{ matrix.family.family }}' '${{ matrix.family.version }}'"

      - name: Process Family
        shell: pwsh
        run: |
          Write-Host "Processing: ${{ matrix.family.family }}"

          if (-Not (Test-Path "workspace/docfx/api")) {
              python scripts/reference/extract_files.py "${{ matrix.family.nuget }}" "${{ matrix.family.version }}" "${{ matrix.family.family }}"
              if ($LASTEXITCODE -ne 0) { exit 1 }
              python scripts/reference/generate_docfx.py "${{ matrix.family.nuget }}"
              if ($LASTEXITCODE -ne 0) { exit 1 }
              python scripts/reference/postprocessor.py "${{ matrix.family.family }}" "${{ matrix.family.version }}"
              if ($LASTEXITCODE -ne 0) { exit 1 }
          }

      - name: Prepare to Push
        shell: pwsh
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Push ${{ matrix.family.family }} to aspose.net/content/reference.aspose.net/
        env:
          REPO_TOKEN: ${{ secrets.ASPOSE_PAT }}
        run: python scripts/reference/push_to_repo.py "${{ matrix.family.family }}" "${{ matrix.family.version }}"
      
      - name: Update Status
        shell: pwsh
        run: |
          python scripts/reference/update_status.py "${{ matrix.family.family }}" "${{ matrix.family.version }}"
